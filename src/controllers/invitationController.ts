import { Context } from 'hono';
import { supabase } from '../config/supabase';
import CustomError from '../utils/customError';
import { sendSuccessResponse, sendErrorResponse } from '../utils/apiResponse';
import { supabaseAdmin } from '../config/supabaseAdmin';

export const createInvitation = async (c: Context) => {
  try {
    const authUser = c.get('user');
    const { email } = await c.req.json();

    if (!authUser || !authUser.id) {
      throw new CustomError('Not authenticated', 401);
    }

    const ownerId = authUser.id;

    const { data, error: userError } =
      await supabaseAdmin.auth.admin.getUserById(ownerId);

    if (userError || !data || !data.user) {
      throw new CustomError('Error fetching user data', 500);
    }

    const ownerUser = data.user;

    const ownerData = {
      user_id: ownerUser.id,
      business_id: ownerUser.user_metadata?.business_id,
      role: ownerUser.user_metadata?.role,
      businesses: { name: ownerUser.user_metadata?.business_name },
    };

    if (!ownerData || ownerData.role !== 'Owner' || !ownerData.business_id) {
      throw new CustomError(
        'Access denied. Only business owners can send invitations.',
        403
      );
    }

    // Check if the email is already registered as staff for this business
    const { data: existingUsers, error: usersError } =
      await supabaseAdmin.auth.admin.listUsers();

    if (usersError) {
      throw new CustomError('Error checking existing users', 500);
    }

    const existingStaff = existingUsers.users.find(
      (user) =>
        user.email === email &&
        user.user_metadata?.business_id === ownerData.business_id
    );

    if (existingStaff) {
      throw new CustomError('This email is already registered as staff.', 400);
    }

    // Use Supabase admin client to send invitation
    const { data: inviteData, error: inviteError } =
      await supabaseAdmin.auth.admin.inviteUserByEmail(email, {
        data: {
          business_id: ownerData.business_id,
          business_name: ownerData.businesses.name,
          role: 'Staff',
        },
        redirectTo: `${process.env.FRONTEND_URL}/dashboard/invitations/confirm-and-set-password`,
      });

    if (inviteError || !inviteData) {
      throw new CustomError('Error sending invitation', 500);
    }

    // The token is now generated by Supabase
    const token = inviteData.user.confirmation_sent_at;

    // Store invitation record
    const { data: invitationData, error: createError } = await supabase
      .from('invitations')
      .insert({
        business_id: ownerData.business_id,
        email,
        token,
        expires_at: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(), // 48 hours from now
        created_at: new Date().toISOString(),
      })
      .select()
      .single();

    if (createError) {
      console.error('Error creating invitation record:', createError);
      throw new CustomError('Error recording invitation', 500);
    }

    return sendSuccessResponse(
      c,
      { email },
      'Invitation sent successfully',
      201
    );
  } catch (error) {
    console.error('Error in createInvitation:', error);
    if (error instanceof CustomError) {
      return sendErrorResponse(c, error.message, error.statusCode);
    }
    return sendErrorResponse(c, 'An unexpected error occurred', 500);
  }
};

export const confirmAndSetPassword = async (c: Context) => {
  try {
    const { token, password } = await c.req.json();

    if (!token || typeof token !== 'string') {
      throw new CustomError('Invalid token provided', 400);
    }

    // Verify the token with Supabase
    const { data: verifyData, error: verifyError } =
      await supabaseAdmin.auth.verifyOtp({
        token_hash: token,
        type: 'invite',
      });

    if (verifyError || !verifyData || !verifyData.user) {
      throw new CustomError('Invalid or expired token', 400);
    }

    const invitedUser = verifyData.user;

    // Set the user's password
    const { error: updateError } =
      await supabaseAdmin.auth.admin.updateUserById(invitedUser.id, {
        password: password,
      });

    if (updateError) {
      throw new CustomError('Error setting password', 500);
    }

    // Fetch the invitation to get the business_id
    const { data: invitation, error: invitationError } = await supabase
      .from('invitations')
      .select('business_id')
      .eq('email', invitedUser.email)
      .single();

    if (invitationError || !invitation) {
      throw new CustomError('Error fetching invitation details', 500);
    }

    // Update user metadata
    const { error: metadataError } =
      await supabaseAdmin.auth.admin.updateUserById(invitedUser.id, {
        user_metadata: {
          business_id: invitation.business_id,
          role: 'Staff',
        },
      });

    if (metadataError) {
      throw new CustomError('Error updating user data', 500);
    }

    // Update the invitation record
    const { error: acceptError } = await supabase
      .from('invitations')
      .update({ accepted: true })
      .eq('email', invitedUser.email);

    if (acceptError) {
      throw new CustomError('Error updating invitation status', 500);
    }

    return sendSuccessResponse(c, {}, 'Account created successfully', 201);
  } catch (error) {
    console.error('Error in confirmAndSetPassword:', error);
    if (error instanceof CustomError) {
      return sendErrorResponse(c, error.message, error.statusCode);
    }
    return sendErrorResponse(c, 'An unexpected error occurred', 500);
  }
};

export const getInvitations = async (c: Context) => {
  try {
    const authUser = c.get('user');

    if (!authUser || !authUser.id) {
      throw new CustomError('Not authenticated', 401);
    }

    const ownerId = authUser.id;

    // Check if the user is an owner
    const { data: userData, error: userError } =
      await supabaseAdmin.auth.admin.getUserById(ownerId);

    if (userError || !userData || !userData.user) {
      throw new CustomError('Error fetching user data', 500);
    }

    const ownerUser = userData.user;

    if (ownerUser.user_metadata?.role !== 'Owner') {
      throw new CustomError(
        'Access denied. Only business owners can view invitations.',
        403
      );
    }

    const businessId = ownerUser.user_metadata?.business_id;

    // Fetch invitations for the owner's business
    const { data: invitations, error: invitationsError } = await supabase
      .from('invitations')
      .select('*')
      .eq('business_id', businessId)
      .order('created_at', { ascending: false });

    if (invitationsError) {
      console.error('Error fetching invitations:', invitationsError);
      throw new CustomError('Error fetching invitations', 500);
    }

    return sendSuccessResponse(
      c,
      { invitations },
      'Invitations retrieved successfully'
    );
  } catch (error) {
    console.error('Error in getInvitations:', error);
    if (error instanceof CustomError) {
      return sendErrorResponse(c, error.message, error.statusCode);
    }
    return sendErrorResponse(c, 'An unexpected error occurred', 500);
  }
};
