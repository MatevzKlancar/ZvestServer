import { Context } from 'hono';
import { supabase } from '../config/supabase';
import CustomError from '../utils/customError';
import { sendSuccessResponse, sendErrorResponse } from '../utils/apiResponse';
import { supabaseAdmin } from '../config/supabaseAdmin';

interface Business {
  name: string;
}

interface OwnerData {
  user_id: string;
  business_id: string;
  role: string;
  businesses: Business;
}

export const createInvitation = async (c: Context) => {
  try {
    const user = c.get('user');
    const { email } = await c.req.json();

    if (!user || !user.sub) {
      throw new CustomError('Not authenticated', 401);
    }

    const ownerId = user.sub;

    // Check if the user is an owner and get their business
    const { data: ownerData, error: ownerError } = (await supabase
      .from('all_users')
      .select(
        `
        user_id, 
        business_id, 
        role,
        businesses (
          name
        )
      `
      )
      .eq('user_id', ownerId)
      .single()) as { data: OwnerData | null; error: any };

    if (
      ownerError ||
      !ownerData ||
      ownerData.role !== 'Owner' ||
      !ownerData.business_id
    ) {
      throw new CustomError(
        'Access denied. Only business owners can send invitations.',
        403
      );
    }

    // Check if the email is already registered as staff for this business
    const { data: existingStaff, error: staffError } = await supabase
      .from('all_users')
      .select('user_id')
      .eq('email', email)
      .eq('business_id', ownerData.business_id)
      .single();

    if (existingStaff) {
      throw new CustomError('This email is already registered as staff.', 400);
    }

    // Use Supabase admin client to send invitation
    const { data, error: inviteError } =
      await supabaseAdmin.auth.admin.inviteUserByEmail(email, {
        data: {
          business_id: ownerData.business_id,
          business_name: ownerData.businesses.name,
          role: 'Staff',
        },
        redirectTo: `${process.env.FRONTEND_URL}/dashboard/invitations/confirm-and-set-password`,
      });

    if (inviteError || !data) {
      throw new CustomError('Error sending invitation', 500);
    }

    // The token is now generated by Supabase
    const token = data.user.confirmation_sent_at;

    // Store invitation record
    const { data: invitationData, error: createError } = await supabase
      .from('invitations')
      .insert({
        business_id: ownerData.business_id,
        email,
        token,
        expires_at: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(), // 48 hours from now
        created_at: new Date().toISOString(),
      })
      .select()
      .single();

    if (createError) {
      console.error('Error creating invitation record:', createError);
      throw new CustomError('Error recording invitation', 500);
    }

    console.log('Stored invitation:', invitationData);

    // We don't need to generate our own invitation link now
    // Supabase will send the email with the correct link

    return sendSuccessResponse(
      c,
      { email },
      'Invitation sent successfully',
      201
    );
  } catch (error) {
    console.error('Error in createInvitation:', error);
    if (error instanceof CustomError) {
      return sendErrorResponse(c, error.message, error.statusCode);
    }
    return sendErrorResponse(c, 'An unexpected error occurred', 500);
  }
};

export const confirmAndSetPassword = async (c: Context) => {
  try {
    const { token, password } = await c.req.json();

    console.log('Received token:', token);
    console.log('Token length:', token ? token.length : 0);

    if (!token || typeof token !== 'string') {
      throw new CustomError('Invalid token provided', 400);
    }

    // Verify the token with Supabase
    const { data, error: verifyError } = await supabaseAdmin.auth.verifyOtp({
      token_hash: token,
      type: 'invite',
    });

    if (verifyError || !data || !data.user) {
      console.log('Error verifying token:', verifyError);
      throw new CustomError('Invalid or expired token', 400);
    }

    const user = data.user;

    // Set the user's password
    const { error: updateError } =
      await supabaseAdmin.auth.admin.updateUserById(user.id, {
        password: password,
      });

    if (updateError) {
      console.log('Error setting password:', updateError);
      throw new CustomError('Error setting password', 500);
    }

    // Fetch the invitation to get the business_id
    const { data: invitation, error: invitationError } = await supabase
      .from('invitations')
      .select('business_id')
      .eq('email', user.email)
      .single();

    if (invitationError || !invitation) {
      console.log('Error fetching invitation:', invitationError);
      throw new CustomError('Error fetching invitation details', 500);
    }

    // Create entry in all_users table
    const { error: insertError } = await supabase.from('all_users').insert({
      user_id: user.id,
      email: user.email,
      business_id: invitation.business_id,
      role: 'Staff',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    });

    if (insertError) {
      console.log('Error inserting into all_users:', insertError);
      throw new CustomError('Error creating user record', 500);
    }

    // Update the invitation record
    await supabase
      .from('invitations')
      .update({ accepted: new Date().toISOString() })
      .eq('email', user.email);

    return sendSuccessResponse(c, {}, 'Account created successfully', 201);
  } catch (error) {
    console.error('Error in confirmAndSetPassword:', error);
    if (error instanceof CustomError) {
      return sendErrorResponse(c, error.message, error.statusCode);
    }
    return sendErrorResponse(c, 'An unexpected error occurred', 500);
  }
};
